How can I change the table connected to the reservation to reserved = True when reservation is made?

This is my code:
from django.shortcuts import render
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User
from .models import Table, Reservation
from home.models import Restaurant
from datetime import date
from .forms import PickDateForm
# from django.contrib.auth import User



# create reservation page
@login_required
def reservation_page(request):

    test_user = User.objects.filter(id=3)
    table = Table.objects.filter(id=1000)
    restaurant = Restaurant.objects.filter(id=2)



    # testers = [
    #     Reservation(
    #         user='tester',
    #         party_size='4',
    #         table=1,
    #         restaurant='2'
    #     )
    # ]

    # Get number of avalible tables from the resturant
    # associated with the logged in user
    nr_of_tables = request.user.customer.restaurant.avalible_tables

    # get all tables and reservations for todays date
    # (today is when page is loaded)
    tables = Table.objects.filter(date=date.today())
    reservations = Reservation.objects.filter(table__date=date.today())

    # if there are no tables, create tables and save them to the database
    # nr of tables created depends on restaurants nr of avalible tables
    if not tables:
        tables = []
        for table in range(nr_of_tables):
            new_table = Table()
            new_table.save()
            tables.append(new_table)

    if tables:
        tester = Reservation(
                user=test_user[0],
                party_size='4',
                table=table[0],
                restaurant=restaurant[0],
                # table__reserved=True,
            )
        # tester.table__reserved = True


        if not reservations:
            reservations = []
            for reservation in range(1):
                new_reservation = tester
                # new_reservation.table__reserved = True
                # new_reservation.table.reserved = True
                # new_reservation.table.reserved = 'True'
                # new_reservation.table__reserved = 'True'

                new_reservation.save()
                # new_reservation.table.save()
                reservations.append(new_reservation)


    if request.method == "POST":
        date_form = PickDateForm(data=request.POST)
        if date_form.is_valid():
            selected_date = date_form.cleaned_data['date']
            tables = Table.objects.filter(date=selected_date)
            reservations = Reservation.objects.filter(
                table__date=selected_date)
            if not tables:
                tables = []
                for table in range(nr_of_tables):
                    new_table = Table(date=selected_date)
                    new_table.save()
                    tables.append(new_table)

            return render(request, 'reservation/reservation.html',
                          {'tables': tables,
                           'date_form': date_form,
                           'reservations': reservations,
                           })


    date_form = PickDateForm()

    return render(request, 'reservation/reservation.html',
                  {'tables': tables,
                   'date_form': date_form,
                   'reservations': reservations,
                   })




# create automated bookings when selecting time to pre populate the
# bookings to create the appearance of existing bookings every day
# JavaScript? check PP2 get value from input and walkthrough project
# check rosie resume, github connection

# might be slow for user, create tables and pre-populate bookings
# when loading reservation page
# if reservations filter through each day
# for 30 days and if 0 = create 10 bookings








# edit reservation page, get ID, check customer edit.




# Delete reservation page, get ID, check request.user vs user
Tired of pasting in code?

ANSWER | PHIND-34B MODEL
To change the reserved attribute of a Table to True when a reservation is made, you need to modify the Reservation model's save method to update the related Table object. This involves overriding the save method in your Reservation model to include logic that sets the reserved attribute of the associated Table to True upon saving a new Reservation instance.

Here's how you can do it:

Override the save method in the Reservation model: You need to override the save method in your Reservation model to include logic that updates the reserved attribute of the associated Table object.
Use the update_fields parameter for efficiency: When updating the Table object, you can use the update_fields parameter to specify that only the reserved field should be updated. This is more efficient than updating all fields of the Table object.
Here's an example of how you might implement this:

from django.db import models

class Table(models.Model):
    # Assuming you have a reserved field in your Table model
    reserved = models.BooleanField(default=False)
    # Other fields...

class Reservation(models.Model):
    # Assuming you have a foreign key to Table in your Reservation model
    table = models.ForeignKey(Table, on_delete=models.CASCADE)
    # Other fields...

    def save(self, *args, **kwargs):
        # Call the original save method to save the reservation
        super(Reservation, self).save(*args, **kwargs)

        # Update the reserved field of the associated table to True
        self.table.reserved = True
        self.table.save(update_fields=['reserved'])
In this example, when a Reservation instance is saved, it first calls the original save method to save the reservation itself. Then, it updates the reserved attribute of the associated Table object to True and saves the Table object, specifying that only the reserved field should be updated.

This approach ensures that the reserved attribute of the Table is updated to True whenever a new reservation is made, reflecting the reservation status accurately in your database.

Remember, overriding the save method can have implications, especially if you're not careful with how you handle exceptions or if you're not fully aware of the side effects. Always test thoroughly to ensure that your changes work as expected and do not introduce any unintended side effects 5.